// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Renewals = sequelize.define('renewals', {
    nextRenewalDate: {
      type: DataTypes.DATE,
    },
    renewalStartDate: {
      type: DataTypes.DATE,
    },
    renewalEndDate: {
      type: DataTypes.DATE,
    },
    renewalPaidDate: {
      type: DataTypes.DATE,
    },
    status: {
      type: DataTypes.ENUM(
        'PAID',
        'UN_PAID',
        'FAILED',
      ),
      allowNull: false,
    },
    type: {
      type: DataTypes.ENUM(
        'BOOKING',
        'FULL_SUBSCRIPTION',
        'PARTIAL_SUBSCRIPTION',
      ),
      allowNull: false,
    },
    baseAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    insuranceAmount: {
      type: DataTypes.DOUBLE,
    },
    depositAmount: {
      type: DataTypes.DOUBLE,
    },
    totalAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    discountAmount: {
      type: DataTypes.DOUBLE,
      defaultValue: "0",
      allowNull: false,
    },
    subTotalAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    totalTaxAmount: {
      type: DataTypes.DOUBLE,
      defaultValue: "0",
    },
    nextRenewalSubTotal: {
      type: DataTypes.DOUBLE,
    },
    nextRenewalTotal: {
      type: DataTypes.DOUBLE,
    },
    nextRenewalDiscount: {
      type: DataTypes.DOUBLE,
    },
  }, {
    tableName: 'renewals',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Renewals.associate = (models) => {
    Renewals.belongsTo(models.bookings, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'booking',
    });
    Renewals.belongsTo(models.bookingsPromotions, {
      foreignKey: {
        name: 'bookingPromotionIdKey',
        field: 'booking_promotion_id',
      },
      as: 'bookingPromotion',
    });
    Renewals.belongsTo(models.platformInsurances, {
      foreignKey: {
        name: 'insuranceIdKey',
        field: 'insurance_id',
      },
      as: 'insurance',
    });
    Renewals.belongsTo(models.promotions, {
      foreignKey: {
        name: 'promotionIdKey',
        field: 'promotion_id',
      },
      as: 'promotion',
    });
    Renewals.belongsTo(models.transactions, {
      foreignKey: {
        name: 'transactionIdKey',
        field: 'transaction_id',
      },
      as: 'transaction',
    });
    Renewals.hasMany(models.appliedTaxes, {
      foreignKey: {
        name: 'renewalIdKey',
        field: 'renewal_id',
      },
      as: 'appliedTaxes',
    });
    Renewals.hasMany(models.payouts, {
      foreignKey: {
        name: 'renewalIdKey',
        field: 'renewal_id',
      },
      as: 'payouts',
    });
    Renewals.hasMany(models.promotionsRedeem, {
      foreignKey: {
        name: 'renewalIdKey',
        field: 'renewal_id',
      },
      as: 'promotionsRedeems',
    });
    Renewals.hasMany(models.terminations, {
      foreignKey: {
        name: 'lastRenewalIdKey',
        field: 'last_renewal_id',
      },
      as: 'lastRenewalTerminations',
    });
    Renewals.hasMany(models.transactions, {
      foreignKey: {
        name: 'renewalIdKey',
        field: 'renewal_id',
      },
      as: 'transactions',
    });
  };

  return Renewals;
};
