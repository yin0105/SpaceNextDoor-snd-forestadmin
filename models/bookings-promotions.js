// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const BookingsPromotions = sequelize.define('bookingsPromotions', {
    nameEn: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameTh: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameJp: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameKr: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    descriptionEn: {
      type: DataTypes.STRING,
    },
    descriptionTh: {
      type: DataTypes.STRING,
    },
    descriptionJp: {
      type: DataTypes.STRING,
    },
    descriptionKr: {
      type: DataTypes.STRING,
    },
    format: {
      type: DataTypes.ENUM(
        'PUBLIC',
        'CODE',
        'VOUCHER',
      ),
      allowNull: false,
    },
    status: {
      type: DataTypes.ENUM(
        'DRAFT',
        'ACTIVE',
        'IN_ACTIVE',
        'FINISH',
      ),
      defaultValue: "DRAFT",
      allowNull: false,
    },
    code: {
      type: DataTypes.STRING,
    },
    startDate: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    endDate: {
      type: DataTypes.DATE,
    },
    max: {
      type: DataTypes.INTEGER,
    },
    maxPerDay: {
      type: DataTypes.INTEGER,
    },
    maxPerCustomer: {
      type: DataTypes.INTEGER,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'bookings_promotions',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  BookingsPromotions.associate = (models) => {
    BookingsPromotions.belongsTo(models.bookings, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'booking',
    });
    BookingsPromotions.belongsTo(models.promotions, {
      foreignKey: {
        name: 'promotionIdKey',
        field: 'promotion_id',
      },
      as: 'promotion',
    });
    BookingsPromotions.hasMany(models.renewals, {
      foreignKey: {
        name: 'bookingPromotionIdKey',
        field: 'booking_promotion_id',
      },
      as: 'bookingPromotionRenewals',
    });
    BookingsPromotions.hasMany(models.promotionsRedeem, {
      foreignKey: {
        name: 'bookingPromotionIdKey',
        field: 'booking_promotion_id',
      },
      as: 'bookingPromotionPromotionsRedeems',
    });
    BookingsPromotions.hasMany(models.bookingsPromotionsCustomerGets, {
      foreignKey: {
        name: 'bookingPromotionIdKey',
        field: 'booking_promotion_id',
      },
      as: 'bookingPromotionBookingsPromotionsCustomerGets',
    });
    BookingsPromotions.hasMany(models.bookingsPromotionsCustomerBuys, {
      foreignKey: {
        name: 'bookingPromotionIdKey',
        field: 'booking_promotion_id',
      },
      as: 'bookingPromotionBookingsPromotionsCustomerBuys',
    });
  };

  return BookingsPromotions;
};
