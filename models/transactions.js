// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Transactions = sequelize.define('transactions', {
    shortId: {
      type: DataTypes.STRING,
    },
    terminationId: {
      type: DataTypes.INTEGER,
    },
    stripeChargeId: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    stripeCustomerId: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    cardLastDigits: {
      type: DataTypes.STRING,
    },
    cardBrandName: {
      type: DataTypes.STRING,
    },
    amount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    currency: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    invoiceId: {
      type: DataTypes.STRING,
    },
    type: {
      type: DataTypes.ENUM(
        'BOOKING',
        'ORDER',
        'BOOKING_ORDER',
        'TERMINATION',
        'RENEWAL',
        'REFUND_CANCEL_BOOKING',
        'REFUND_DEPOSIT',
        'REFUND_UNUSED_DAYS',
      ),
      defaultValue: "BOOKING",
      allowNull: false,
    },
  }, {
    tableName: 'transactions',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Transactions.associate = (models) => {
    Transactions.belongsTo(models.bookings, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'booking',
    });
    Transactions.belongsTo(models.orders, {
      foreignKey: {
        name: 'orderIdKey',
        field: 'order_id',
      },
      as: 'order',
    });
    Transactions.belongsTo(models.refunds, {
      foreignKey: {
        name: 'refundIdKey',
        field: 'refund_id',
      },
      as: 'refund',
    });
    Transactions.belongsTo(models.renewals, {
      foreignKey: {
        name: 'renewalIdKey',
        field: 'renewal_id',
      },
      as: 'renewal',
    });
    Transactions.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    Transactions.hasMany(models.renewals, {
      foreignKey: {
        name: 'transactionIdKey',
        field: 'transaction_id',
      },
      as: 'renewals',
    });
  };

  return Transactions;
};
