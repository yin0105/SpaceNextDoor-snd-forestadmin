// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const SiteAddresses = sequelize.define('siteAddresses', {
    lat: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    lng: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    point: {
      type: DataTypes.STRING,
    },
    flat: {
      type: DataTypes.STRING,
    },
    state: {
      type: DataTypes.STRING,
    },
    street: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    postalCode: {
      type: DataTypes.STRING,
    },
    updatedBy: {
      type: DataTypes.INTEGER,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'site_addresses',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  SiteAddresses.associate = (models) => {
    SiteAddresses.belongsTo(models.cities, {
      foreignKey: {
        name: 'cityIdKey',
        field: 'city_id',
      },
      as: 'city',
    });
    SiteAddresses.belongsTo(models.countries, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'country',
    });
    SiteAddresses.belongsTo(models.districts, {
      foreignKey: {
        name: 'districtIdKey',
        field: 'district_id',
      },
      as: 'district',
    });
    SiteAddresses.hasMany(models.sites, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      as: 'addressSites',
    });
  };

  return SiteAddresses;
};
