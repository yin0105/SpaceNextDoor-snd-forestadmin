// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const PlatformServices = sequelize.define('platformServices', {
    titleEn: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    titleTh: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    titleJp: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    titleKr: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    descriptionEn: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    descriptionTh: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    descriptionJp: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    descriptionKr: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    icon: {
      type: DataTypes.STRING,
    },
    thirdPartyProvider: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    pricePerHour: {
      type: DataTypes.DOUBLE,
    },
    fixedPrice: {
      type: DataTypes.DOUBLE,
    },
    type: {
      type: DataTypes.ENUM(
        'PICK_UP',
      ),
      allowNull: false,
    },
    frequency: {
      type: DataTypes.ENUM(
        'ONE_TIME',
        'RECURRING',
      ),
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'platform_services',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  PlatformServices.associate = (models) => {
    PlatformServices.belongsTo(models.countries, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'country',
    });
    PlatformServices.hasMany(models.ordersPickUpService, {
      foreignKey: {
        name: 'serviceIdKey',
        field: 'service_id',
      },
      as: 'serviceOrdersPickUpServices',
    });
  };

  return PlatformServices;
};
