// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const PlatformFeatures = sequelize.define('platformFeatures', {
    nameEn: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameTh: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameJp: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameKr: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    descriptionEn: {
      type: DataTypes.STRING,
    },
    descriptionTh: {
      type: DataTypes.STRING,
    },
    descriptionJp: {
      type: DataTypes.STRING,
    },
    descriptionKr: {
      type: DataTypes.STRING,
    },
    icon: {
      type: DataTypes.STRING,
    },
    type: {
      type: DataTypes.ENUM(
        'SITE',
        'SPACE',
      ),
      allowNull: false,
    },
    isActive: {
      type: DataTypes.BOOLEAN,
    },
    createdBy: {
      type: DataTypes.INTEGER,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'platform_features',
    underscored: true,
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  PlatformFeatures.associate = (models) => {
    PlatformFeatures.belongsTo(models.platformFeatureCategories, {
      foreignKey: {
        name: 'categoryIdKey',
        field: 'category_id',
      },
      as: 'category',
    });
    PlatformFeatures.belongsToMany(models.bookings, {
      through: 'bookingSpaceFeatures',
      foreignKey: 'feature_id',
      otherKey: 'booking_id',
      as: 'bookingsThroughBookingSpaceFeatures',
    });
    PlatformFeatures.belongsToMany(models.spaces, {
      through: 'spaceFeatures',
      foreignKey: 'feature_id',
      otherKey: 'space_id',
      as: 'spacesThroughSpaceFeatures',
    });
    PlatformFeatures.hasMany(models.siteFeatures, {
      foreignKey: {
        name: 'featureIdKey',
        field: 'feature_id',
      },
      as: 'featureSiteFeatures',
    });
  };

  return PlatformFeatures;
};
