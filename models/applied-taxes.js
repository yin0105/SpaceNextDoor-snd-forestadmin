// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const AppliedTaxes = sequelize.define('appliedTaxes', {
    nameEn: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameTh: {
      type: DataTypes.STRING,
    },
    nameJp: {
      type: DataTypes.STRING,
    },
    nameKr: {
      type: DataTypes.STRING,
    },
    type: {
      type: DataTypes.ENUM(
        'ABSOLUTE',
        'PERCENTAGE',
      ),
      defaultValue: "PERCENTAGE",
      allowNull: false,
    },
    value: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    taxAmount: {
      type: DataTypes.DOUBLE,
      defaultValue: "0",
    },
    entityType: {
      type: DataTypes.ENUM(
        'SITE',
        'INSURANCE',
        'SERVICE',
      ),
      allowNull: false,
    },
    isDefault: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    createdBy: {
      type: DataTypes.INTEGER,
    },
    updatedBy: {
      type: DataTypes.INTEGER,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'applied_taxes',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  AppliedTaxes.associate = (models) => {
    AppliedTaxes.belongsTo(models.bookings, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'booking',
    });
    AppliedTaxes.belongsTo(models.cities, {
      foreignKey: {
        name: 'cityIdKey',
        field: 'city_id',
      },
      as: 'city',
    });
    AppliedTaxes.belongsTo(models.countries, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'country',
    });
    AppliedTaxes.belongsTo(models.platformInsurances, {
      foreignKey: {
        name: 'insuranceIdKey',
        field: 'insurance_id',
      },
      as: 'insurance',
    });
    AppliedTaxes.belongsTo(models.orders, {
      foreignKey: {
        name: 'orderIdKey',
        field: 'order_id',
      },
      as: 'order',
    });
    AppliedTaxes.belongsTo(models.ordersPickUpService, {
      foreignKey: {
        name: 'orderPickupServiceIdKey',
        field: 'order_pickup_service_id',
      },
      as: 'orderPickupService',
    });
    AppliedTaxes.belongsTo(models.renewals, {
      foreignKey: {
        name: 'renewalIdKey',
        field: 'renewal_id',
      },
      as: 'renewal',
    });
    AppliedTaxes.belongsTo(models.platformTaxes, {
      foreignKey: {
        name: 'taxIdKey',
        field: 'tax_id',
      },
      as: 'tax',
    });
  };

  return AppliedTaxes;
};
