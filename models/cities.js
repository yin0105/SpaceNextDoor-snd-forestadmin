// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Cities = sequelize.define('cities', {
    nameEn: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameTh: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameJp: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nameKr: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    code: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'cities',
    underscored: true,
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Cities.associate = (models) => {
    Cities.belongsTo(models.countries, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'country',
    });
    Cities.hasMany(models.bookingSiteAddresses, {
      foreignKey: {
        name: 'cityIdKey',
        field: 'city_id',
      },
      as: 'bookingSiteAddresses',
    });
    Cities.hasMany(models.siteAddresses, {
      foreignKey: {
        name: 'cityIdKey',
        field: 'city_id',
      },
      as: 'siteAddresses',
    });
    Cities.hasMany(models.districts, {
      foreignKey: {
        name: 'cityIdKey',
        field: 'city_id',
      },
      as: 'districts',
    });
  };

  return Cities;
};
