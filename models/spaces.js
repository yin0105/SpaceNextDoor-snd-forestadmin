// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Spaces = sequelize.define('spaces', {
    name: {
      type: DataTypes.STRING,
    },
    description: {
      type: DataTypes.STRING,
    },
    images: {
      type: DataTypes.ARRAY(DataTypes.STRING),
    },
    rejectionReason: {
      type: DataTypes.STRING,
    },
    status: {
      type: DataTypes.ENUM(
        'ACTIVE',
        'ARCHIVED',
        'DRAFT',
        'IN_ACTIVE',
        'READY_TO_REVIEW',
        'REJECTED',
      ),
      defaultValue: "DRAFT",
      allowNull: false,
    },
    size: {
      type: DataTypes.DOUBLE,
    },
    height: {
      type: DataTypes.DOUBLE,
    },
    width: {
      type: DataTypes.DOUBLE,
    },
    length: {
      type: DataTypes.DOUBLE,
    },
    sizeUnit: {
      type: DataTypes.STRING,
    },
    totalUnits: {
      type: DataTypes.INTEGER,
    },
    availableUnits: {
      type: DataTypes.INTEGER,
    },
    stockManagementType: {
      type: DataTypes.ENUM(
        'SND',
        'THIRD_PARTY',
        'AFFILIATE',
      ),
    },
    thirdPartySpaceId: {
      type: DataTypes.STRING,
    },
    createdBy: {
      type: DataTypes.INTEGER,
    },
    updatedBy: {
      type: DataTypes.INTEGER,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    oldSpaceId: {
      type: DataTypes.INTEGER,
    },
  }, {
    tableName: 'spaces',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Spaces.associate = (models) => {
    Spaces.belongsTo(models.platformSpaceTypes, {
      foreignKey: {
        name: 'platformSpaceTypeIdKey',
        field: 'platform_space_type_id',
      },
      as: 'platformSpaceType',
    });
    Spaces.belongsTo(models.sites, {
      foreignKey: {
        name: 'siteIdKey',
        field: 'site_id',
      },
      as: 'site',
    });
    Spaces.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    Spaces.belongsToMany(models.platformFeatures, {
      through: 'spaceFeatures',
      foreignKey: 'space_id',
      otherKey: 'feature_id',
      as: 'platformFeaturesThroughSpaceFeatures',
    });
    Spaces.hasMany(models.bookings, {
      foreignKey: {
        name: 'spaceIdKey',
        field: 'space_id',
      },
      as: 'bookings',
    });
    Spaces.hasMany(models.calendars, {
      foreignKey: {
        name: 'spaceIdKey',
        field: 'space_id',
      },
      as: 'calendars',
    });
    Spaces.hasMany(models.prices, {
      foreignKey: {
        name: 'spaceIdKey',
        field: 'space_id',
      },
      as: 'prices',
    });
  };

  return Spaces;
};
