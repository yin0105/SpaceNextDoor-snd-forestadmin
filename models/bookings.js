// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Bookings = sequelize.define('bookings', {
    customerName: {
      type: DataTypes.STRING,
    },
    customerEmail: {
      type: DataTypes.STRING,
    },
    customerPhoneNumber: {
      type: DataTypes.STRING,
    },
    moveInDate: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    moveOutDate: {
      type: DataTypes.DATE,
    },
    commitmentMonths: {
      type: DataTypes.INTEGER,
    },
    autoRenewal: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    },
    spaceSize: {
      type: DataTypes.DOUBLE,
    },
    spaceHeight: {
      type: DataTypes.DOUBLE,
    },
    isDepositRefunded: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    },
    depositRefundedDate: {
      type: DataTypes.DATE,
    },
    depositedAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    spaceWidth: {
      type: DataTypes.DOUBLE,
    },
    spaceLength: {
      type: DataTypes.DOUBLE,
    },
    spaceSizeUnit: {
      type: DataTypes.STRING,
    },
    spacePricePerMonth: {
      type: DataTypes.DOUBLE,
    },
    currency: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    currencySign: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    siteName: {
      type: DataTypes.STRING,
    },
    shortId: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    siteDescription: {
      type: DataTypes.STRING,
    },
    isInsured: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    },
    status: {
      type: DataTypes.ENUM(
        'ACTIVE',
        'CANCELLED',
        'COMPLETED',
        'CONFIRMED',
        'RESERVED',
        'TERMINATED',
      ),
      defaultValue: "RESERVED",
      allowNull: false,
    },
    baseAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    insuranceAmount: {
      type: DataTypes.DOUBLE,
      defaultValue: "0",
      allowNull: true,
    },
    totalAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    discountAmount: {
      type: DataTypes.DOUBLE,
      defaultValue: "0",
      allowNull: false,
    },
    subTotalAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    oldBookingId: {
      type: DataTypes.INTEGER,
    },
    isTerminationRequested: {
      type: DataTypes.BOOLEAN,
    },
    unitId: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'bookings',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Bookings.associate = (models) => {
    Bookings.belongsTo(models.users, {
      foreignKey: {
        name: 'customerIdKey',
        field: 'customer_id',
      },
      as: 'customer',
    });
    Bookings.belongsTo(models.platformInsurances, {
      foreignKey: {
        name: 'insuranceIdKey',
        field: 'insurance_id',
      },
      as: 'insurance',
    });
    Bookings.belongsTo(models.users, {
      foreignKey: {
        name: 'providerIdKey',
        field: 'provider_id',
      },
      as: 'provider',
    });
    Bookings.belongsTo(models.bookingSiteAddresses, {
      foreignKey: {
        name: 'siteAddressIdKey',
        field: 'site_address_id',
      },
      as: 'siteAddress',
    });
    Bookings.belongsTo(models.sites, {
      foreignKey: {
        name: 'siteIdKey',
        field: 'site_id',
      },
      as: 'site',
    });
    Bookings.belongsTo(models.spaces, {
      foreignKey: {
        name: 'spaceIdKey',
        field: 'space_id',
      },
      as: 'space',
    });
    Bookings.belongsToMany(models.platformFeatures, {
      through: 'bookingSpaceFeatures',
      foreignKey: 'booking_id',
      otherKey: 'feature_id',
      as: 'platformFeaturesThroughBookingSpaceFeatures',
    });
    Bookings.hasMany(models.transactions, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'transactions',
    });
    Bookings.hasMany(models.terminations, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'terminations',
    });
    Bookings.hasMany(models.renewals, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'renewals',
    });
    Bookings.hasMany(models.promotionsRedeem, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'promotionsRedeems',
    });
    Bookings.hasMany(models.bookingsPromotions, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'bookingsPromotions',
    });
    Bookings.hasMany(models.ordersHistory, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'ordersHistories',
    });
    Bookings.hasMany(models.orders, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'orders',
    });
    Bookings.hasMany(models.bookingsHistory, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'bookingsHistories',
    });
    Bookings.hasMany(models.payouts, {
      foreignKey: {
        name: 'bookingIdKey',
        field: 'booking_id',
      },
      as: 'payouts',
    });
  };

  return Bookings;
};
